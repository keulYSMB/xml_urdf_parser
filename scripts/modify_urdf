#!/usr/bin/env python

# Copyright (C) 2014 Aldebaran Robotics
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

# This file takes the official URDF aldebaran files and convert them
# to rep120 compliant urdf files. It also includes the meshes from nao_meshes package 
# allowing to display the model in RVIZ

#FIXME Add : Fingers for Humanoids and Sensors
#TODO Convert .obj and .ply meshes to .dae meshes in order to use it in gazebo

import sys
import argparse
from xml_urdf_parser.urdf import URDF
import xml_urdf_parser.gazeboUrdf
import xml_urdf_parser.urdf as ur
import subprocess
import os
import math
from xml.dom.minidom import Document

parser = argparse.ArgumentParser(usage='Load an URDF file')
parser.add_argument('-i','--input', default=None, help='URDF file to load')
parser.add_argument('-o', '--output', default=None, help='Dump file to XML')
parser.add_argument('-m','--meshes', choices=['mesh','cylinder','dae'], 
default='mesh', 
help='Choose the meshes to use geometricalShapes, mesh(.obj and .ply) or collada(Gazebo . dae)')
parser.add_argument('-r','--REP120', choices=['true','false'], default='true',
help='Rename the links to be REP120 compliant')
parser.add_argument('-t','--texture', choices=['true','false'],
default='false', help='Add textures to visual elements')
#parser.add_argument('-s','--sensor', choices=['true','false'],
#default='true', help='Add/Remove sensor frames')
parser.add_argument('-x','--xacro', choices=['urdf','robot','torso','legs','arms'],
default='robot', help='Chose output files')


pi_2 = math.pi/2

# nao links
dictioNaoXacro= {
'head':'gaze',
'legs':'Feet',
'arms':'gripper',
'torso':'torso',
'sonar':'Sonar',
#'robot':'',
}

dictioNao = {
u'TorsoLink':'torso',        	        # collada
u'HeadYawLink':'Neck',
u'HeadPitchLink':'Head',
u'LShoulderPitchLink':'LShoulder', 
u'RShoulderPitchLink':'RShoulder', 
u'LShoulderRollLink':'LBicep',       	        # collada
u'RShoulderRollLink':'RBicep', #u'HeadPitchLink':'gaze',
u'LElbowYawLink':'LElbow',
u'RElbowYawLink':'RElbow',
u'LElbowRollLink':'LForeArm',
u'RElbowRollLink':'RForeArm',
u'LHipYawPitchLink':'LPelvis',
u'RHipYawPitchLink':'RPelvis',
u'LHipRollLink':'LHip',
u'RHipRollLink':'RHip',
u'LHipPitchLink':'LThigh',
u'RHipPitchLink':'RThigh',
u'LKneePitchLink':'LTibia',
u'RKneePitchLink':'RTibia',
u'LAnklePitchLink':'l_ankle',
u'RAnklePitchLink':'r_ankle',

u'LAnkleRollLink':'LFeet',            # collada
u'RAnkleRollLink':'RFeet',  	        # collada
u'LWristYawLink':'l_wrist',             # collada
u'RWristYawLink':'r_wrist',             # collada
}
diclinks = dictioNao
Nao_offsets = {
'FootHeight_V40':4.519e-2,
'HandOffsetX_V40':5.775e-2,
'HandOffsetZ_V40':1.231e-2,
'FootHeight_V33':4.519e-2,
'HandOffsetX_V33':5.775e-2,
'HandOffsetZ_V33':1.231e-2,
'FootHeight_V32':4.511e-2,
'HandOffsetX_V32':5.8e-2,
'HandOffsetZ_V32':1.59e-2,
'CameraTopOffsetX':5.39e-2,
'CameraTopOffsetZ':6.79e-2,
'CameraBottomOffsetX':4.88e-2,
'CameraBottomOffsetZ':2.381e-2,
'CameraBottomRotY':0.6981,
}
#wrist
Nao_visu = {
'torso': ur.Cylinder(0.015,0.2115),       	        # collada
'Head':ur.Cylinder(0.04,0.14),                 # collada
'LBicep':ur.Cylinder(0.015,0.09),            # collada
'LForeArm': ur.Cylinder(0.015,0.05065),           # collada
'LThigh': ur.Cylinder(0.015,0.1),                # collada
'LTibia':   ur.Cylinder(0.015,0.1),             # collada
'l_ankle':     ur.Cylinder(0.015,0.046),            # collada
'RThigh': ur.Cylinder(0.015,0.1),                # collada  
'RTibia': ur.Cylinder(0.015,0.1),  	            # collada
'r_ankle':   ur.Cylinder(0.015,0.046),   	        # collada
'RBicep':ur.Cylinder(0.015,0.09),            # collada
'RForeArm':  ur.Cylinder(0.015,0.05065),          # collada
'l_sole': ur.Box((0.16,0.06,0.015)),
'r_sole': ur.Box((0.16,0.06,0.015)),
'l_wrist':  ur.Cylinder(0.015,0.058), 
'r_wrist':  ur.Cylinder(0.015,0.058), 
}
Nao_orig=  {
'torso': ur.Pose((0,0,0.02075),(0,0,0)),       	        # collada
'Head':  ur.Pose((0,0,0.058),(pi_2,0,0)),          # collada
'LBicep':  ur.Pose((0.045,0,0),(pi_2,0,pi_2)),   # collada
'LForeArm': ur.Pose((0.025325,0,0),(pi_2,0,pi_2)),    # collada
'LThigh':   ur.Pose((0,0,-0.05),(0,0,0)),            # collada
'LTibia':  ur.Pose((0,0,-0.05),(0,0,0)),            # collada
'l_ankle':      ur.Pose((0,0,-0.023),(0,0,0)),          # collada
'RThigh':   ur.Pose((0,0,-0.05),(0,0,0)),            # collada  
'RTibia': ur.Pose((0,0,-0.05),(0,0,0)),    	        # collada
'r_ankle':       ur.Pose((0,0,-0.023),(0,0,0)),  	    # collada
'RBicep': ur.Pose((0.045,0,0),(pi_2,0,pi_2)),    # collada
'RForeArm': ur.Pose((0.025325,0,0),(pi_2,0,pi_2)),    # collada
'l_sole': ur.Pose((0.02,0,0.0075),(0,0,0)),
'r_sole': ur.Pose((0.02,0,0.0075),(0,0,0)),
'l_wrist':ur.Pose((0.029,0,0),(pi_2,0,pi_2)),
'r_wrist': ur.Pose((0.029,0,0),(pi_2,0,pi_2)),
}


####################
##### FUNCTIONS ####
####################

def defineMaterials(robot):
    robot.add_material(ur.Material('Black',ur.Color(0.1,0.1,0.1,1)))
    robot.add_material(ur.Material('LightGrey',ur.Color(0.8,0.8,0.8,1)))
    robot.add_material(ur.Material('Grey',ur.Color(0.6,0.6,0.6,1)))
    robot.add_material(ur.Material('DarkGrey',ur.Color(0.3,0.3,0.3,1)))


def REP120func(robot):
    global name
    global diclinks
    print 'renaming joints_links and links to comply to REP120'
    #adding base_link and gaze link
    robot.add_link(ur.Link('base_link'))
    robot.add_link(ur.Link('gaze'))
    robot.add_link(ur.Link('l_sole'))
    robot.add_link(ur.Link('r_sole'))
    robot.add_link(ur.Link('l_gripper'))
    robot.add_link(ur.Link('r_gripper'))


    if name == 'nao':
        diclinks = dictioNao
    elif name == 'romeo':
        diclinks = dictioRomeo

    
    ## Rename joints
    for joint in robot.joints:
        try:
            robot.joints[joint].parent = diclinks[robot.joints[joint].parent]
        except KeyError:
            pass
        try:
            robot.joints[joint].child = diclinks[robot.joints[joint].child]
        except KeyError:
            pass
    for link in robot.links.keys():
        try:
            robot.rename_link(link,diclinks[link])
        except KeyError:
            pass
            
        except ValueError:
            pass
     
    for link in robot.links.keys():   
        try:
            if link.find('sole') != -1:
                robot.add_gazebo(ur.Gazebo(robot.links[link].name,"Gazebo/White","false",None,None,None,0.5,0.5,None,None,None,"false"))
            else:
                if link.startswith('L') or link.startswith('l'):
                    robot.add_gazebo(ur.Gazebo(robot.links[link].name,"Gazebo/White","false",None,None,None,0.5,0.5,None,None,None,"false"))
                elif link.startswith('R') or link.startswith('r'):
                    robot.add_gazebo(ur.Gazebo(robot.links[link].name,"Gazebo/White","false",None,None,None,0.5,0.5,None,None,None,"false"))
                else:
                    robot.add_gazebo(ur.Gazebo(robot.links[link].name,"Gazebo/White","false",None,None,None,0.5,0.5,None,None,None,"false"))
                 
        except KeyError:
            pass
#libroboticsgroup_gazebo_mimic_joint_plugin.so
#    for joint in robot.joints:
#        if joint.mimic!=None:
#            robot.add_gazebo(ur.Gazebo(None,None,None,None,None,None,None,None,None,None,None,None,None,None,[ur.MimicJointPlugin(str(joint.name) + '_mimic','libroboticsgroup_gazebo_mimic_joint_plugin.so',joint.name,,1,None )))


    if name == 'nao':
        print 'adding nao missing joints and links'
        robot.add_link(ur.Link('CameraTop_frame'))
        robot.add_link(ur.Link('CameraBottom_frame'))
        #sensors 
        robot.add_joint(ur.Joint('CameraTop_joint', 'Head',
'CameraTop_frame', 'fixed', None, ur.Pose((Nao_offsets['CameraTopOffsetX'],\
0,Nao_offsets['CameraTopOffsetZ']),(0,0,0))))
        robot.add_joint(ur.Joint('CameraBottom_joint', 'Head',
'CameraBottom_frame', 'fixed', None,
ur.Pose((Nao_offsets['CameraBottomOffsetX'],0,Nao_offsets['CameraBottomOffsetZ']),\
(0,Nao_offsets['CameraBottomRotY'],0))))

        #sonars
        robot.add_link(ur.Link('LSonar'))
        robot.add_link(ur.Link('RSonar'))
        robot.add_joint(ur.Joint('LSonar_joint', 'torso',
        'LSonar', 'fixed', None, ur.Pose((0.0507,0.03785,0.06035),(0,0.04365,-0.39265))))
        robot.add_joint(ur.Joint('RSonar_joint', 'torso',
        'RSonar', 'fixed', None, ur.Pose((0.0507,-0.03785,0.06035),(0,0.04365,0.39265))))


        # add joints accordingly
        robot.add_joint(ur.Joint('base_joint', 'base_link', 'torso', 'fixed',
        None, ur.Pose((0,0,0),(0,0,0))))
        robot.add_joint(ur.Joint('l_sole_joint','l_ankle','l_sole','fixed', \
        None,ur.Pose((0,0,-Nao_offsets['FootHeight_' + version]),(0,0,0))))
        robot.add_joint(ur.Joint('r_sole_joint','r_ankle','r_sole','fixed', \
        None,ur.Pose((0,0,-Nao_offsets['FootHeight_' + version]),(0,0,0))))
        robot.add_joint(ur.Joint('LHand','l_wrist','l_gripper',\
        'fixed',None,ur.Pose((Nao_offsets['HandOffsetX_' + version],0, \
        -Nao_offsets['HandOffsetZ_' + version]),(0,0,0))))
        robot.add_joint(ur.Joint('RHand','r_wrist','r_gripper', \
        'fixed',None,ur.Pose((Nao_offsets['HandOffsetX_' + version],0, \
        -Nao_offsets['HandOffsetZ_' + version]),(0,0,0))))
        robot.add_joint(ur.Joint('gaze_joint', 'CameraTop_frame',
'gaze', 'fixed', None, ur.Pose((0,0,0),(0,0,0))))



##################
##### Meshes #####
##################

def displayVisuals(robot):
    global name
    if name == 'nao':
            print 'including cylinders'
            for link in robot.links:
                try:
                    if robot.links[link].visual == None:
                        robot.links[link].visual = ur.Visual() 
                    robot.links[link].visual.geometry = Nao_visu[robot.links[link].name]
                    robot.links[link].visual.origin = Nao_orig[robot.links[link].name]
                    robot.links[link].visual.material = ur.Material('LightGrey')
                except:
                    robot.links[link].visual = None
                try:
                    if robot.links[link].collision == None:
                        robot.links[link].collision = ur.Collision() 
                    robot.links[link].collision.geometry = Nao_visu[robot.links[link].name]
                    robot.links[link].collision.origin = Nao_orig[robot.links[link].name]
                    robot.links[link].collision.material = ur.Material('LightGrey')
                except:
                    robot.links[link].collision = None

def MeshesRes(robot,meshes):
    global version
    global name
    global args
    a=''
    cmd = 'rospack find '+str(name)+'_meshes'
    mesh_installed = 0
    try:
        pathmeshes = subprocess.check_output(cmd, 
        stderr=subprocess.STDOUT, shell=True)[:-1]
        mesh_installed = 1
        print str(pathmeshes)
    except:
        print 'could not find package'

    if(mesh_installed==1 and args.meshes!='cylinder'):
        print "renaming meshes"
        if os.path.isdir(pathmeshes + '/meshes/' + str(version)):
            for link in robot.links:
                try: 
                    if args.meshes=='mesh':
                        file_list = sorted(os.listdir(pathmeshes +'/meshes/' + str(version) + '/visual'))
                    else:
                        file_list = sorted(os.listdir(pathmeshes +'/meshes/' + str(version) + '/visual/collada'))
                    found = False
                    for file in file_list:
                        if robot.links[link].name.endswith("Link"):
                            if file.startswith(robot.links[link].name[:-4]) and not file.endswith('.mtl'):
                                robot.links[link].visual = None
                                if args.meshes=='mesh':

                                    robot.links[link].visual = ur.Visual(ur.Mesh('',(0.001,0.001,0.001)))
                                    robot.links[link].visual.geometry.filename =  'package://nao_meshes/meshes/' + str(version) + '/visual/' + file
                                else:
                                    robot.links[link].visual = ur.Visual(ur.Mesh('',(0.1,0.1,0.1)))
                                    robot.links[link].visual.geometry.filename =  'package://nao_meshes/meshes/' + str(version) + '/visual/collada/' + file
                                found = True   
                                break
                        else:
                            if file.startswith(robot.links[link].name) and not file.endswith('.mtl'):
                                robot.links[link].visual = None
                                if args.meshes=='mesh':
                                    robot.links[link].visual = ur.Visual(ur.Mesh('',(0.001,0.001,0.001)))
                                    robot.links[link].visual.geometry.filename =  'package://nao_meshes/meshes/' + str(version) + '/visual/' + file
                                else:
                                    robot.links[link].visual = ur.Visual(ur.Mesh('',(0.1,0.1,0.1)))
                                    robot.links[link].visual.geometry.filename =  'package://nao_meshes/meshes/' + str(version) + '/visual/collada/' + file
                                found = True   
                                break
                        if found == False:
                            robot.links[link].visual = None
                except:
                    pass
                if found == True:
                    if args.meshes == 'mesh':
                        colfile =  str(robot.links[link].visual.geometry.filename[0:robot.links[link].visual.geometry.filename.find('visual')]) + 'collision' + str(robot.links[link].visual.geometry.filename[robot.links[link].visual.geometry.filename.find('visual')+6:-4]) + '.ply' 
                    else: 
                        colfile =  str(robot.links[link].visual.geometry.filename[0:robot.links[link].visual.geometry.filename.find('visual')]) + 'collision' + str(robot.links[link].visual.geometry.filename[robot.links[link].visual.geometry.filename.find('visual')+6:-4]) + '.dae' 
#                        colfile =  robot.links[link].visual.geometry.filename
                    robot.links[link].collision =  ur.Collision(ur.Mesh(colfile, robot.links[link].visual.geometry.scale))
    # 'include visuals xacro from Armin'
        else:
            print "display cylinders"
            defineMaterials(robot)
            displayVisuals(robot)
    else:
        print "display cylinders"
        defineMaterials(robot)
        displayVisuals(robot)



#################################
######## XACRO FUNCTIONS ########
#################################
def exportXacroRobotElementList(robot,element):
    doc = Document()
    root = doc.createElement("robot")
    doc.appendChild(root)
    root.setAttribute("xmlns:xacro","http://www.ros.org/wiki/xacro")
    print 'create element file'
    for i in robot.elements:
        try:
            if element == 'Transmission':
                if i.name.find(element) != -1:
                    print i
                    root.appendChild(i.to_xml(doc))
            elif element == 'Gazebo':
#                if i.reference != None:
                if i.reference != None:
                    root.appendChild(i.to_xml(doc))
                elif i.plugins != []:
                    root.appendChild(i.to_xml(doc))
        except AttributeError:
            pass
#    if args.output.find('/') != -1:
#        filename = args.output[args.output.rfind('/')+1:args.output.find('.')]+ str(element) + '.xacro'
#    else : 
    filename = args.output[0:args.output.find('.')]+ str(element) + '.xacro'
    print filename
    file = open(filename,'w') 
    file.write(doc.toprettyxml()) 
    

def exportXacroRobot(robot):
    doc = Document()
    root = doc.createElement("robot")
    doc.appendChild(root)
    root.setAttribute("xmlns:xacro","http://www.ros.org/wiki/xacro")
    root.setAttribute("name",robot.name)
    for i in dictioNaoXacro.keys():
        print "exporting " +str(dictioNaoXacro[i]) + ' xacro' 
        exportXacroRobotChain(robot,i)
        if args.output.find('/') != -1:
            filenamerobot = args.output[args.output.rfind('/')+1:args.output.find('.')]+ i + '.xacro'
        else : 
            filenamerobot = args.output[0:args.output.find('.')]+ i + str('.xacro')
        root.appendChild(ur.short(doc,'xacro:include','filename',filenamerobot))

    exportXacroRobotElementList(robot,'Transmission')
    exportXacroRobotElementList(robot,'Gazebo')
    if args.output.find('/') != -1:
        root.appendChild(ur.short(doc,'xacro:include','filename',args.output[args.output.rfind('/')+1:args.output.find('.')]+ 'Transmission.xacro'))
        root.appendChild(ur.short(doc,'xacro:include','filename',args.output[args.output.rfind('/')+1:args.output.find('.')]+ 'Gazebo.xacro'))
    else:
        root.appendChild(ur.short(doc,'xacro:include','filename',args.output[0:args.output.find('.')]+ 'Transmission.xacro'))
        root.appendChild(ur.short(doc,'xacro:include','filename',args.output[0:args.output.find('.')]+ 'Gazebo.xacro'))
#    if args.output.rfind('/') != -1:
#        filename = args.output[args.output.rfind('/')+1:args.output.find('.')]+ 'robot' + '.xacro'
#    else:
    filename = args.output[0:args.output.find('.')]+ 'robot' + str('.xacro')
    print filename
    file = open(filename,'w') 
    file.write(doc.toprettyxml()) 

   
def exportXacroRobotChain(robot, keyword):
    chainRef = robot.get_chain('base_link','torso')
    doc = Document()
    root = doc.createElement("robot")
    doc.appendChild(root)
    root.setAttribute("xmlns:xacro","http://www.ros.org/wiki/xacro")
    chainNb =0
    try: 
        chain1 = robot.get_chain('base_link','l_'+dictioNaoXacro[keyword])
        chain2 = robot.get_chain('base_link','r_'+dictioNaoXacro[keyword])
        chainNb=2
    except KeyError:
        try:
            chain1 = robot.get_chain('base_link','L'+dictioNaoXacro[keyword])
            chain2 = robot.get_chain('base_link','R'+dictioNaoXacro[keyword])
            chainNb = 2
        except KeyError:
            try: 
                chain1 = robot.get_chain('base_link',dictioNaoXacro[keyword])
                chainNb = 1
            except KeyError:
                print 'the chain '+str(keyword) +' cannot be found'
    
    if chainNb != 0:
        duplicate = 0
        for i in range(len(chain1)):
            for j in range(len(chainRef)):
                if chain1[i] == chainRef[j]:
                    duplicate =1
            if duplicate == 0 or keyword == 'torso':
                try:
                    root.appendChild(robot.links[chain1[i]].to_xml(doc))
                except KeyError:
                    try:
                        root.appendChild(robot.joints[chain1[i]].to_xml(doc))
                    except KeyError:
                        print 'unknown element' + str(chain1[i])        
            else:
                duplicate =0
        if chainNb ==2:
            for i in range(len(chain2)):
                for j in range(len(chainRef)):
                    if chain2[i] == chainRef[j]:
                        duplicate =1
                if duplicate == 0:
                    try:
                        root.appendChild(robot.links[chain2[i]].to_xml(doc))
                    except KeyError:
                        try:
                            root.appendChild(robot.joints[chain2[i]].to_xml(doc))
                        except KeyError:
                            print 'unknown element' + str(chain2[i])        
                else:
                    duplicate =0
#        if args.output.find('/') != -1:
#            filenamearms = args.output[args.output.rfind('/')+1:args.output.find('.')] + keyword +str('.xacro')
#        else:
        filenamearms = args.output[0:args.output.find('.')] + keyword + str('.xacro')
        print filenamearms
        filename = open(filenamearms,'w') 
        filename.write(doc.toprettyxml())

##############
#### Main ####
##############

args = parser.parse_args()
if args.input is None:
    robot = URDF.from_parameter_server()
else:
    robot = URDF.load_xml_file(args.input)

version = robot.name[robot.name.find('V'):]
if version == '':
    version = str(args.input)[str(args.input).find("V"):str(args.input).find("V")+3] 
    if version == '':
        print 'unable to retrieve robot version'

if version != '':
    if robot.name.find('nao')!=-1:
        name = 'nao'
    elif robot.name.find('romeo')!=-1:
        name = 'romeo'
    elif robot.name.find('pepper')!=-1:
        name = 'pepper'

    print'processing ' + str(name) + " robot's urdf file"
     
    if args.REP120=='true':
        if(name != 'pepper'):
            REP120func(robot)
    MeshesRes(robot,args.meshes)
    #if args.sensor == 'false':
    #    RemoveNoInertia(robot)
    if args.xacro == 'robot':
        exportXacroRobot(robot)
    elif args.xacro == 'urdf':
        print args.output
        robot.write_xml(args.output)
    else : 
        exportXacroRobotChain(robot,args.xacro)
